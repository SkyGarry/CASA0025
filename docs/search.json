[
  {
    "objectID": "readme.html",
    "href": "readme.html",
    "title": "",
    "section": "",
    "text": "Group Repository for CASA0025: Building Spatial Applications with Big Data\nGroup members: Yuhan Wang, Ximeng Chang, Ruixuan Li, Yuyou Xie, Xinyi Lin, Yuanqing Zhang\nYour website should now be available under https://SkyGarry.github.io/CASA0025"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CASA00025 Group Project Title Here",
    "section": "",
    "text": "This project utilises Google Earth Engine to map, analyse, and simulate the relationship between vegetation (NDVI) and land surface temperature (LST) in Los Angeles neighbourhoods between 2013 and 2022. By combining satellite data, administrative boundaries, and interactive visualisations, the tool identifies persistent urban heat islands, quantifies the cooling benefits of greening, and highlights spatial disparities. The application enables planners and communities to make data-driven decisions about urban heat mitigation, promoting equitable, targeted interventions that are consistent with California’s climate and public health policies.\n\n\nIn 2012, California’s legislature passed AB 296 (Chapter 667), mandating CalEPA to develop measurable urban emission reduction and cooling targets, urging metropolitan areas to address climate and health challenges (California Environmental Protection Agency, 2012). As a major western city, Los Angeles faces intensified urban heat island effects due to its Mediterranean climate, basin topography, and uneven green space distribution—causing higher daytime temperatures, poor nighttime cooling, and increased ozone levels in green-deficient neighborhoods, raising public health risks. With over 1,100 heat-related deaths annually in California, vulnerable groups face disproportionate exposure. This application uses Google Earth Engine to support equitable, data-driven green infrastructure strategies aligned with AB 296.\n\n\n\nThis application is designed for urban planners, public health officials, environmental scientists, GIS analysts, and community organizations across Los Angeles. Powered by Google Earth Engine, it generates annual NDVI and land surface temperature (LST) fluctuation maps for 100 incorporated cities in the county, performs pixel-level correlation analysis to identify precise “high-heat, low-green” hotspots, and produces comparative trend reports for coastal, basin, and foothill communities. Users can export annotated interactive maps and charts, integrating results into greening and cooling strategies to support equitable green infrastructure interventions and mitigate health risks through data-driven, participatory, and climate-responsive decision-making.\n\n\n\nSource of data: Neighborhood Council Boundaries (2018) https://geohub.lacity.org/datasets/674f80b8edee4bf48551512896a1821d_0/explore?location=34.299731%2C-118.430536%2C8.93\nUSGS Landsat 8 Level 2, Collection 2, Tier 1 https://developers.google.com/earth-engine/datasets/catalog/LANDSAT_LC08_C02_T1_L2\nMOD11A2 v006 MODIS/Terra Land Surface Temperature/Emissivity 8-Day L3 Global 1 km SIN GridPI: Zhengming Wan https://lpdaac.usgs.gov/products/mod11a2v006/\nMOD13Q1.061 Terra Vegetation Indices 16-Day Global 250m https://developers.google.com/earth-engine/datasets/catalog/MODIS_061_MOD13Q1?hl=zh-cn\nData Processing: 1. Goal Extract annual average NDVI and LST for each neighborhood, analyzing ten-year trends. Each cycle starts in July and ends the following July. 2. Data Output • One NDVI and one LST table per year (10 years total) • Each table includes average values for all neighborhoods 3. Processing • Load boundaries for 100 incorporated communities in Los Angeles • Define time range (2013–2023) • Define NDVI and LST extraction functions and export yearly data • Loop through all years 4. Result See 20 export tasks in GEE. Click “Run” to export to Google Drive for analysis and visualization.\n\n\n\nWe calculate the annual mean NDVI and LST to assess overall trends in vegetation and surface temperature. Spatial mapping reveals patterns of greenness and heat hotspots. The urban-rural comparison assesses vulnerability across different areas. NDVI-LST regression measures the cooling effect of vegetation. Heat island frequency analysis identifies neighbourhoods that require immediate intervention. Scenario simulations estimate the cooling effect of increased greening. Each method is intended to reveal aspects of the vegetation-temperature relationship and to aid in urban heat mitigation and green infrastructure planning.\n\n\n\nThe system was developed on Google Earth Engine for policymakers, urban planners, and environmental researchers. It combines map interaction, chart visualization, and simulation functions to support urban heat island mitigation and greening strategies. A year slider allows switching between NDVI and LST layers from 2013 to 2022, with automatic legend and color scale updates. Users can select any location to view historical trends in vegetation and surface temperature. A built-in simulator adjusts NDVI increments and visualizes predicted cooling. The system identifies persistent heat islands using LST percentile thresholds and compares urban-rural zones to reveal spatial ecological inequality.\n\n\n\n\n\n\n\n\n\n\n\nProcessing // —————————— // 1. Loading community boundaries // —————————— var neighborhoods = table\n// —————————— // 2. Defined year range (last 10 years) // —————————— var startYear = 2013; var endYear = 2023;\n// —————————— // 3. Define the NDVI extraction function // —————————— function processNDVI(year) { var start = ee.Date.fromYMD(year, 7, 1); var end = start.advance(1, ‘year’);\nvar collection = ee.ImageCollection(“LANDSAT/LC08/C02/T1_L2”) .filterDate(start, end) .filterBounds(table) .map(function(image) { var ndvi = image.normalizedDifference([‘SR_B5’, ‘SR_B4’]).rename(‘NDVI’); return image.addBands(ndvi).copyProperties(image, [“system:time_start”]); });\nvar ndviMean = collection.select(‘NDVI’).mean().clip(table);\nvar stats = ndviMean.reduceRegions({ collection: table, reducer: ee.Reducer.mean(), scale: 30, }).map(function(f) { return f.set(‘Year’, year); });\n// Derive NDVI for each year Export.table.toDrive({ collection: stats, description: ‘NDVI_’+ year + ’_July_to_June’, fileFormat: ‘CSV’ }); }\n// —————————— // 4. Define the LST extraction function // —————————— function processLST(year) { var start = ee.Date.fromYMD(year, 7, 1); var end = start.advance(1, ‘year’);\nvar collection = ee.ImageCollection(“MODIS/006/MOD11A2”) .filterDate(start, end) .filterBounds(table) .map(function(image) { var lstC = image.select(‘LST_Day_1km’) .multiply(0.02) .subtract(273.15) .rename(‘LST’); return lstC.copyProperties(image, [“system:time_start”]); });\nvar lstMean = collection.mean().clip(table);\nvar stats = lstMean.reduceRegions({ collection: table, reducer: ee.Reducer.mean(), scale: 1000, }).map(function(f) { return f.set(‘Year’, year); });\n// Export LST for each year Export.table.toDrive({ collection: stats, description: ‘LST_’+ year + ’_July_to_June’, fileFormat: ‘CSV’ }); }\n// —————————— // 5. Loop over all years // —————————— var years = ee.List.sequence(startYear, endYear - 1);\nyears.getInfo().forEach(function(year){ processNDVI(year); processLST(year); });\nAnalysis and Visualisation 1. Load Datasets\n// Load city boundary FeatureCollection (polygon vector data)\nvar cityBoundary = ee.FeatureCollection(\"projects/ee-yqzhang5112/assets/City_Boundary\");\n\n// Load MODIS NDVI collection, convert to NDVI scale, and add 'year' property\nvar ndviCol = ee.ImageCollection(\"MODIS/006/MOD13Q1\").select(\"NDVI\")\n  .map(function(img) {\n    var year = ee.Date(img.get('system:time_start')).get('year');\n    return img.multiply(0.0001).copyProperties(img, ['system:time_start']).set('year', year);\n  });\n\n// Load MODIS LST collection, convert to Celsius, rename band, and add 'year' property\nvar lstCol = ee.ImageCollection(\"MODIS/006/MOD11A2\").select(\"LST_Day_1km\")\n  .map(function(img) {\n    var year = ee.Date(img.get('system:time_start')).get('year');\n    return img.multiply(0.02).subtract(273.15).rename('LST_C')\n             .copyProperties(img, ['system:time_start']).set('year', year);\n  });\n\n// Load pre-aggregated NDVI and LST tables (features by neighborhood and year)\nvar ndviTable = ee.FeatureCollection(\"projects/ee-liruixuanie/assets/NDVI_merge\");\nvar lstTable = ee.FeatureCollection(\"projects/ee-liruixuanie/assets/LST_merge\");\n\nUtility Function to Remove Layers\n\n// Remove map layer by its name (used for dynamic visualization updates)\nfunction removeLayer(name) {\n  Map.layers().forEach(function(layer) {\n    if (layer.getName() === name) Map.remove(layer);\n  });\n}\n\nInitialize UI\n\n// Center map on city and add city boundary for context\nMap.centerObject(cityBoundary, 10);\nMap.addLayer(cityBoundary, {color: 'black'}, 'City Boundary');\n\n// Add a year selection slider to control NDVI and LST visualization by year\nvar yearSlider = ui.Slider({\n  min: 2013, max: 2022, step: 1, value: 2020,\n  onChange: function(year) {\n    updateNDVI(year);\n    updateLST(year);\n    renderPrediction(year, ndviDeltaSlider.getValue());\n  }\n});\nMap.add(ui.Panel([ui.Label('Select Year for NDVI and LST'), yearSlider], null, {position: 'top-left'}));\n\nDefine Legend Function\n\n// Create colorbar legend panel for map layers\nfunction makeLegend(titleText, palette, minVal, maxVal) {\n  var legend = ui.Panel({style: {\n    position: 'bottom-left', padding: '8px 15px', backgroundColor: 'white'\n  }});\n  var title = ui.Label({value: titleText, style: {fontWeight: 'bold', fontSize: '14px', margin: '0 0 6px 0'}});\n  var colorBar = ui.Thumbnail({\n    image: ee.Image.pixelLonLat().select(0).multiply((maxVal - minVal)/100.0).add(minVal)\n            .visualize({min: minVal, max: maxVal, palette: palette}),\n    params: {bbox: [0, 0, 100, 10], dimensions: '100x10'},\n    style: {stretch: 'horizontal', margin: '4px 8px'}\n  });\n  var labels = ui.Panel({\n    widgets: [\n      ui.Label(minVal.toFixed(1), {fontSize: '10px'}),\n      ui.Label('Low → High', {fontSize: '10px', textAlign: 'center', stretch: 'horizontal'}),\n      ui.Label(maxVal.toFixed(1), {fontSize: '10px', textAlign: 'right'})\n    ],\n    layout: ui.Panel.Layout.flow('horizontal')\n  });\n  legend.add(title);\n  legend.add(colorBar);\n  legend.add(labels);\n  return legend;\n}\n\nvar ndviLegendPanel;\nvar lstLegendPanel;\n\nNDVI Image and Chart Shows the NDVI map for the selected year。\n\n// Update NDVI map for a selected year, remove previous NDVI layer, add legend\nfunction updateNDVI(year) {\n  if (ndviLegendPanel) Map.remove(ndviLegendPanel);\n  var ndviImage = ndviCol.filter(ee.Filter.eq('year', year)).mean().clip(cityBoundary);\n  Map.layers().forEach(function(layer) {\n    if (layer.getName() === 'NDVI_Year') Map.remove(layer);\n  });\n  Map.addLayer(ndviImage, {min: 0.2, max: 0.8, palette: ['white', '#66bb66', 'darkgreen']}, 'NDVI_Year');\n  ndviLegendPanel = makeLegend('NDVI Index', ['white', '#66bb66', 'darkgreen'], 0.2, 0.8);\n  Map.add(ndviLegendPanel);\n}\n\nLST Image and Chart Shows LST map for the selected year, highlights the hottest 10% (urban heat islands) in red.\n\n// Update LST map for a selected year, mask top 10% as urban heat island, add legend\nfunction updateLST(year) {\n  if (lstLegendPanel) Map.remove(lstLegendPanel);\n  var lstImage = lstCol.filter(ee.Filter.eq('year', year)).mean().clip(cityBoundary);\n  Map.layers().forEach(function(layer) {\n    var name = layer.getName();\n    if (name === 'LST_Year' || name === 'Heat_Island') Map.remove(layer);\n  });\n  Map.addLayer(lstImage, {min: 20, max: 40, palette: ['blue', 'cyan', 'yellow', 'orange', 'red']}, 'LST_Year');\n  var lst90 = lstImage.reduceRegion({reducer: ee.Reducer.percentile([90]), geometry: cityBoundary.geometry(), scale: 1000}).get('LST_C');\n  var mask = lstImage.gt(ee.Number(lst90)).selfMask();\n  Map.addLayer(mask, {palette: ['red']}, 'Heat_Island');\n  lstLegendPanel = makeLegend('LST (°C)', ['blue', 'cyan', 'yellow', 'orange', 'red'], 20, 40);\n  Map.add(lstLegendPanel);\n}\n\nUrban vs Rural Chart NDVI/LST values by urban/rural class and annual time series for comparison.\n\n// Add urban/rural class info to NDVI and LST tables for group comparisons\nvar withClassNDVI = ndviTable.map(function(f) {\n  var region = cityBoundary.filter(ee.Filter.eq('Name', f.get('Name'))).first();\n  return f.set('UrbanClass', region.get('UrbanClass'));\n});\n\nvar withClassLST = lstTable.map(function(f) {\n  var region = cityBoundary.filter(ee.Filter.eq('Name', f.get('Name'))).first();\n  return f.set('UrbanClass', region.get('UrbanClass'));\n});\n\n// Create and print NDVI and LST line charts grouped by UrbanClass\nvar ndviByClass = ui.Chart.feature.groups({\n  features: withClassNDVI,\n  xProperty: 'Year',\n  yProperty: 'mean',\n  seriesProperty: 'UrbanClass'\n}).setChartType('LineChart')\n  .setOptions({\n    title: 'Annual mean of NDVI in urban and rural areas',\n    hAxis: {title: 'Year'},\n    vAxis: {title: 'NDVI'},\n    lineWidth: 2\n  });\nprint(ndviByClass);\n\nvar lstByClass = ui.Chart.feature.groups({\n  features: withClassLST,\n  xProperty: 'Year',\n  yProperty: 'mean',\n  seriesProperty: 'UrbanClass'\n}).setChartType('LineChart')\n  .setOptions({\n    title: 'Annual mean of LST in urban and rural areas',\n    hAxis: {title: 'Year'},\n    vAxis: {title: 'LST (°C)'},\n    lineWidth: 2\n  });\nprint(lstByClass);\n\nCount Regions with Heat Islands Identifies neighborhoods repeatedly in the hottest 10% (persistent heat islands), helping target mitigation.\n\n// For each year, select top 10% hottest neighborhoods and count their recurrence\nvar years = ee.List.sequence(2013, 2022);\n\nvar topHotLists = years.map(function(y) {\n  var yearTable = lstTable.filter(ee.Filter.eq('Year', y));\n  var sorted = yearTable.sort('mean', false); \n  var count = sorted.size();\n  var top10pct = sorted.limit(count.multiply(0.1).int());\n  return top10pct.aggregate_array('Name');\n});\n\nvar allNames = topHotLists.flatten();\nvar nameFreq = allNames.reduce(ee.Reducer.frequencyHistogram());\n\nnameFreq.evaluate(function(hist) {\n  print('Urban heat island areas (≥ 5 years):');\n  var keys = Object.keys(hist);\n  var result = keys.map(function(k) {\n    return {name: k, count: hist[k]};\n  }).filter(function(obj) {\n    return obj.count &gt;= 5;\n  }).sort(function(a, b) {\n    return b.count - a.count;\n  });\n\n  result.forEach(function(obj) {\n    print(obj.name + ': ' + obj.count);\n  });\n});\n\nNDVI Simulated Prediction NDVI–LST regression, NDVI increase simulation, and interactive map cooling effect prediction. The form of NDVI–LST regression: \\[\n\\Large \\mathrm{LST} = k \\times \\mathrm{NDVI} + b\n\\] k represents the slope: how much ° C of surface temperature change (LST) occurs per unit increase in NDVI.NDVI=0 estimates intercept LST: b.\n\n*Addition of 1 unit of NDVI in results assumes land surface transitions from 0 to dense forest. To better detect the LST-NDVI correlation, the slope value will be high.\n// Fit NDVI-LST regression model for a year, allow users to simulate NDVI increase effects\nvar year = 2020;\nvar ndviImage = ndviCol.filter(ee.Filter.eq('year', year)).mean().clip(cityBoundary);\nvar lstImage = lstCol.filter(ee.Filter.eq('year', year)).mean().clip(cityBoundary);\n\n// Define mask for valid NDVI and LST range\nvar mask = ndviImage.gt(0.1).and(ndviImage.lt(0.7))\n                    .and(lstImage.gt(10)).and(lstImage.lt(45));\n\n// Calculate linear fit (slope and intercept) between NDVI and LST for masked region\nvar regression = ndviImage.addBands(lstImage).updateMask(mask)\n  .reduceRegion({\n    reducer: ee.Reducer.linearFit(),\n    geometry: cityBoundary.geometry(),\n    scale: 500,\n    maxPixels: 1e13\n  });\n\n// Evaluate regression and provide interactive simulation for NDVI increase\nregression.evaluate(function(result) {\n  print('Regression index：', result);\n\n  var slope = ee.Number(result.scale);\n  var intercept = ee.Number(result.offset);\n\n  var predictedLST = ndviImage.multiply(slope).add(intercept);\n  Map.addLayer(predictedLST, {\n    min: 20, max: 40,\n    palette: ['blue', 'cyan', 'yellow', 'orange', 'red']\n  }, 'Predicted LST');\n\n  var predictionLabel = ui.Label('Simulated Temperature Change by NDVI Increase');\n\n  // Slider to allow user to interactively simulate NDVI increase and its LST impact\n  var ndviDeltaSlider = ui.Slider({\n    min: 0,\n    max: 0.2,\n    step: 0.01,\n    value: 0.05,\n    style: {stretch: 'horizontal'},\n    onChange: function(delta) {\n      var simulatedNDVI = ndviImage.add(delta);\n      var newLST = simulatedNDVI.multiply(slope).add(intercept);\n      var diffImage = lstImage.subtract(newLST).selfMask();\n\n      // Remove previous simulation layers before updating\n      var layersToRemove = [];\n      Map.layers().forEach(function(layer) {\n        var name = layer.getName();\n        if (typeof name === 'string' && (name === 'Predicted LST')) {\n          layersToRemove.push(layer);\n        }\n      });\n      layersToRemove.forEach(function(layer) {\n        Map.remove(layer);\n      });\n\n      // Add new simulated LST prediction\n      Map.addLayer(newLST, {\n        min: 20, max: 40,\n        palette: ['blue', 'cyan', 'yellow', 'orange', 'red']\n      }, 'Predicted LST');\n\n      // Update label to show estimated cooling\n      predictionLabel.setValue('NDVI increased by ' + delta.toFixed(2) +\n        ', LST estimated Cooling' + (slope.multiply(delta)).format('%.2f').getInfo() + ' °C');\n    }\n  });\n\n  var predictionPanel = ui.Panel({\n    widgets: [\n      ui.Label('Predicted Land Surface Temperature after NDVI Increase', {fontWeight: 'bold'}),\n      ndviDeltaSlider,\n      predictionLabel\n    ],\n    style: {position: 'bottom-left', padding: '8px', width: '280px'}\n  });\n  Map.add(predictionPanel);\n\n});\n\nClick on a Region to View Trends\n\n// When user clicks on a region, show NDVI and LST time series for that region\nMap.onClick(function(coords) {\n  if (chartTabs.getValue() !== 'Clicked Region Trend') return;\n\n  var point = ee.Geometry.Point(coords.lon, coords.lat);\n  var f = ndviTable.filterBounds(point).first();\n  f.evaluate(function(feature) {\n    if (feature) {\n      var name = feature.properties.Name;\n      chartDisplayPanel.clear();\n      chartDisplayPanel.add(ui.Label('Region: ' + name));\n\n      // NDVI trend for selected region\n      var ndviChart = ui.Chart.feature.byFeature(\n        ndviTable.filter(ee.Filter.eq('Name', name)), 'Year', ['mean']\n      ).setChartType('LineChart').setOptions({\n        title: 'NDVI Trend – ' + name,\n        hAxis: {title: 'Year'}, vAxis: {title: 'NDVI'}\n      });\n\n      // LST trend for selected region\n      var lstChart = ui.Chart.feature.byFeature(\n        lstTable.filter(ee.Filter.eq('Name', name)), 'Year', ['mean']\n      ).setChartType('LineChart').setOptions({\n        title: 'LST Trend – ' + name,\n        hAxis: {title: 'Year'}, vAxis: {title: 'LST (°C)'}\n      });\n\n      chartDisplayPanel.add(ndviChart);\n      chartDisplayPanel.add(lstChart);\n    }\n  });\n});\n\nInitialize Layer Rendering\n\n// Initial rendering of NDVI and LST for default year (2020)\nupdateNDVI(2020);\nupdateLST(2020);\n\nChart Tabs & Toggle Panel\n\n// Function to get urban vs rural NDVI chart\nfunction getUrbanRuralNDVIChart() { ... }\n\n// Function to get urban vs rural LST chart\nfunction getUrbanRuralLSTChart() { ... }\n\n// Chart control panel for trend tabs\nvar chartControlPanel = ui.Panel({\n  layout: ui.Panel.Layout.flow('vertical'),\n  style: {position: 'top-right', width: '420px', backgroundColor: 'white', padding: '8px'}\n});\n\nvar chartDisplayPanel = ui.Panel();  // For dynamic display of charts based on tab\n\n// Tab selector for different chart views\nvar chartTabs = ui.Select({\n  items: ['Urban/Rural Comparison', 'Persistent Heat Islands', 'Clicked Region Trend', 'NDVI vs LST Scatter'],\n  value: 'Urban/Rural Comparison',\n  onChange: function(selected) {\n    chartDisplayPanel.clear();\n\n    if (selected === 'Urban/Rural Comparison') {\n      chartDisplayPanel.add(getUrbanRuralNDVIChart());\n      chartDisplayPanel.add(getUrbanRuralLSTChart());\n\n    } else if (selected === 'Persistent Heat Islands') {\n      chartDisplayPanel.add(ui.Label('Regions with UHI ≥ 5 years:'));\n      nameFreq.evaluate(function(hist) {\n        var keys = Object.keys(hist);\n        var result = keys.map(function(k) {\n          return {name: k, count: hist[k]};\n        }).filter(function(obj) {\n          return obj.count &gt;= 5;\n        }).sort(function(a, b) {\n          return b.count - a.count;\n        });\n\n        result.forEach(function(obj) {\n          chartDisplayPanel.add(ui.Label(obj.name + ': ' + obj.count + ' years'));\n        });\n\n        if (result.length === 0) {\n          chartDisplayPanel.add(ui.Label('No regions with persistent UHI over 5 years.'));\n        }\n      });\n\n    } else if (selected === 'Clicked Region Trend') {\n      chartDisplayPanel.add(ui.Label('Please click a region on the map to load NDVI & LST trends.'));\n      \n    } else if (selected === 'NDVI vs LST Scatter') {\n      var join = ee.Join.inner();\n      var filter = ee.Filter.and(\n        ee.Filter.equals({leftField: 'Name', rightField: 'Name'}),\n        ee.Filter.equals({leftField: 'Year', rightField: 'Year'})\n      );\n\n      var joined = join.apply(ndviTable, lstTable, filter).map(function(pair) {\n        var ndvi = ee.Feature(pair.get('primary'));\n        var lst = ee.Feature(pair.get('secondary'));\n        return ndvi.set('LST_C', lst.get('mean')).set('NDVI', ndvi.get('mean'));\n      });\n\n      var scatterChart = ui.Chart.feature.byFeature(joined, 'LST_C', ['NDVI'])\n        .setChartType('ScatterChart')\n        .setOptions({\n          title: 'NDVI vs LST Cor"
  },
  {
    "objectID": "index.html#project-summary",
    "href": "index.html#project-summary",
    "title": "CASA00025 Group Project Title Here",
    "section": "",
    "text": "This project utilises Google Earth Engine to map, analyse, and simulate the relationship between vegetation (NDVI) and land surface temperature (LST) in Los Angeles neighbourhoods between 2013 and 2022. By combining satellite data, administrative boundaries, and interactive visualisations, the tool identifies persistent urban heat islands, quantifies the cooling benefits of greening, and highlights spatial disparities. The application enables planners and communities to make data-driven decisions about urban heat mitigation, promoting equitable, targeted interventions that are consistent with California’s climate and public health policies.\n\n\nIn 2012, California’s legislature passed AB 296 (Chapter 667), mandating CalEPA to develop measurable urban emission reduction and cooling targets, urging metropolitan areas to address climate and health challenges (California Environmental Protection Agency, 2012). As a major western city, Los Angeles faces intensified urban heat island effects due to its Mediterranean climate, basin topography, and uneven green space distribution—causing higher daytime temperatures, poor nighttime cooling, and increased ozone levels in green-deficient neighborhoods, raising public health risks. With over 1,100 heat-related deaths annually in California, vulnerable groups face disproportionate exposure. This application uses Google Earth Engine to support equitable, data-driven green infrastructure strategies aligned with AB 296.\n\n\n\nThis application is designed for urban planners, public health officials, environmental scientists, GIS analysts, and community organizations across Los Angeles. Powered by Google Earth Engine, it generates annual NDVI and land surface temperature (LST) fluctuation maps for 100 incorporated cities in the county, performs pixel-level correlation analysis to identify precise “high-heat, low-green” hotspots, and produces comparative trend reports for coastal, basin, and foothill communities. Users can export annotated interactive maps and charts, integrating results into greening and cooling strategies to support equitable green infrastructure interventions and mitigate health risks through data-driven, participatory, and climate-responsive decision-making.\n\n\n\nSource of data: Neighborhood Council Boundaries (2018) https://geohub.lacity.org/datasets/674f80b8edee4bf48551512896a1821d_0/explore?location=34.299731%2C-118.430536%2C8.93\nUSGS Landsat 8 Level 2, Collection 2, Tier 1 https://developers.google.com/earth-engine/datasets/catalog/LANDSAT_LC08_C02_T1_L2\nMOD11A2 v006 MODIS/Terra Land Surface Temperature/Emissivity 8-Day L3 Global 1 km SIN GridPI: Zhengming Wan https://lpdaac.usgs.gov/products/mod11a2v006/\nMOD13Q1.061 Terra Vegetation Indices 16-Day Global 250m https://developers.google.com/earth-engine/datasets/catalog/MODIS_061_MOD13Q1?hl=zh-cn\nData Processing: 1. Goal Extract annual average NDVI and LST for each neighborhood, analyzing ten-year trends. Each cycle starts in July and ends the following July. 2. Data Output • One NDVI and one LST table per year (10 years total) • Each table includes average values for all neighborhoods 3. Processing • Load boundaries for 100 incorporated communities in Los Angeles • Define time range (2013–2023) • Define NDVI and LST extraction functions and export yearly data • Loop through all years 4. Result See 20 export tasks in GEE. Click “Run” to export to Google Drive for analysis and visualization.\n\n\n\nWe calculate the annual mean NDVI and LST to assess overall trends in vegetation and surface temperature. Spatial mapping reveals patterns of greenness and heat hotspots. The urban-rural comparison assesses vulnerability across different areas. NDVI-LST regression measures the cooling effect of vegetation. Heat island frequency analysis identifies neighbourhoods that require immediate intervention. Scenario simulations estimate the cooling effect of increased greening. Each method is intended to reveal aspects of the vegetation-temperature relationship and to aid in urban heat mitigation and green infrastructure planning.\n\n\n\nThe system was developed on Google Earth Engine for policymakers, urban planners, and environmental researchers. It combines map interaction, chart visualization, and simulation functions to support urban heat island mitigation and greening strategies. A year slider allows switching between NDVI and LST layers from 2013 to 2022, with automatic legend and color scale updates. Users can select any location to view historical trends in vegetation and surface temperature. A built-in simulator adjusts NDVI increments and visualizes predicted cooling. The system identifies persistent heat islands using LST percentile thresholds and compares urban-rural zones to reveal spatial ecological inequality."
  },
  {
    "objectID": "index.html#how-it-works",
    "href": "index.html#how-it-works",
    "title": "CASA00025 Group Project Title Here",
    "section": "",
    "text": "Processing // —————————— // 1. Loading community boundaries // —————————— var neighborhoods = table\n// —————————— // 2. Defined year range (last 10 years) // —————————— var startYear = 2013; var endYear = 2023;\n// —————————— // 3. Define the NDVI extraction function // —————————— function processNDVI(year) { var start = ee.Date.fromYMD(year, 7, 1); var end = start.advance(1, ‘year’);\nvar collection = ee.ImageCollection(“LANDSAT/LC08/C02/T1_L2”) .filterDate(start, end) .filterBounds(table) .map(function(image) { var ndvi = image.normalizedDifference([‘SR_B5’, ‘SR_B4’]).rename(‘NDVI’); return image.addBands(ndvi).copyProperties(image, [“system:time_start”]); });\nvar ndviMean = collection.select(‘NDVI’).mean().clip(table);\nvar stats = ndviMean.reduceRegions({ collection: table, reducer: ee.Reducer.mean(), scale: 30, }).map(function(f) { return f.set(‘Year’, year); });\n// Derive NDVI for each year Export.table.toDrive({ collection: stats, description: ‘NDVI_’+ year + ’_July_to_June’, fileFormat: ‘CSV’ }); }\n// —————————— // 4. Define the LST extraction function // —————————— function processLST(year) { var start = ee.Date.fromYMD(year, 7, 1); var end = start.advance(1, ‘year’);\nvar collection = ee.ImageCollection(“MODIS/006/MOD11A2”) .filterDate(start, end) .filterBounds(table) .map(function(image) { var lstC = image.select(‘LST_Day_1km’) .multiply(0.02) .subtract(273.15) .rename(‘LST’); return lstC.copyProperties(image, [“system:time_start”]); });\nvar lstMean = collection.mean().clip(table);\nvar stats = lstMean.reduceRegions({ collection: table, reducer: ee.Reducer.mean(), scale: 1000, }).map(function(f) { return f.set(‘Year’, year); });\n// Export LST for each year Export.table.toDrive({ collection: stats, description: ‘LST_’+ year + ’_July_to_June’, fileFormat: ‘CSV’ }); }\n// —————————— // 5. Loop over all years // —————————— var years = ee.List.sequence(startYear, endYear - 1);\nyears.getInfo().forEach(function(year){ processNDVI(year); processLST(year); });\nAnalysis and Visualisation 1. Load Datasets\n// Load city boundary FeatureCollection (polygon vector data)\nvar cityBoundary = ee.FeatureCollection(\"projects/ee-yqzhang5112/assets/City_Boundary\");\n\n// Load MODIS NDVI collection, convert to NDVI scale, and add 'year' property\nvar ndviCol = ee.ImageCollection(\"MODIS/006/MOD13Q1\").select(\"NDVI\")\n  .map(function(img) {\n    var year = ee.Date(img.get('system:time_start')).get('year');\n    return img.multiply(0.0001).copyProperties(img, ['system:time_start']).set('year', year);\n  });\n\n// Load MODIS LST collection, convert to Celsius, rename band, and add 'year' property\nvar lstCol = ee.ImageCollection(\"MODIS/006/MOD11A2\").select(\"LST_Day_1km\")\n  .map(function(img) {\n    var year = ee.Date(img.get('system:time_start')).get('year');\n    return img.multiply(0.02).subtract(273.15).rename('LST_C')\n             .copyProperties(img, ['system:time_start']).set('year', year);\n  });\n\n// Load pre-aggregated NDVI and LST tables (features by neighborhood and year)\nvar ndviTable = ee.FeatureCollection(\"projects/ee-liruixuanie/assets/NDVI_merge\");\nvar lstTable = ee.FeatureCollection(\"projects/ee-liruixuanie/assets/LST_merge\");\n\nUtility Function to Remove Layers\n\n// Remove map layer by its name (used for dynamic visualization updates)\nfunction removeLayer(name) {\n  Map.layers().forEach(function(layer) {\n    if (layer.getName() === name) Map.remove(layer);\n  });\n}\n\nInitialize UI\n\n// Center map on city and add city boundary for context\nMap.centerObject(cityBoundary, 10);\nMap.addLayer(cityBoundary, {color: 'black'}, 'City Boundary');\n\n// Add a year selection slider to control NDVI and LST visualization by year\nvar yearSlider = ui.Slider({\n  min: 2013, max: 2022, step: 1, value: 2020,\n  onChange: function(year) {\n    updateNDVI(year);\n    updateLST(year);\n    renderPrediction(year, ndviDeltaSlider.getValue());\n  }\n});\nMap.add(ui.Panel([ui.Label('Select Year for NDVI and LST'), yearSlider], null, {position: 'top-left'}));\n\nDefine Legend Function\n\n// Create colorbar legend panel for map layers\nfunction makeLegend(titleText, palette, minVal, maxVal) {\n  var legend = ui.Panel({style: {\n    position: 'bottom-left', padding: '8px 15px', backgroundColor: 'white'\n  }});\n  var title = ui.Label({value: titleText, style: {fontWeight: 'bold', fontSize: '14px', margin: '0 0 6px 0'}});\n  var colorBar = ui.Thumbnail({\n    image: ee.Image.pixelLonLat().select(0).multiply((maxVal - minVal)/100.0).add(minVal)\n            .visualize({min: minVal, max: maxVal, palette: palette}),\n    params: {bbox: [0, 0, 100, 10], dimensions: '100x10'},\n    style: {stretch: 'horizontal', margin: '4px 8px'}\n  });\n  var labels = ui.Panel({\n    widgets: [\n      ui.Label(minVal.toFixed(1), {fontSize: '10px'}),\n      ui.Label('Low → High', {fontSize: '10px', textAlign: 'center', stretch: 'horizontal'}),\n      ui.Label(maxVal.toFixed(1), {fontSize: '10px', textAlign: 'right'})\n    ],\n    layout: ui.Panel.Layout.flow('horizontal')\n  });\n  legend.add(title);\n  legend.add(colorBar);\n  legend.add(labels);\n  return legend;\n}\n\nvar ndviLegendPanel;\nvar lstLegendPanel;\n\nNDVI Image and Chart Shows the NDVI map for the selected year。\n\n// Update NDVI map for a selected year, remove previous NDVI layer, add legend\nfunction updateNDVI(year) {\n  if (ndviLegendPanel) Map.remove(ndviLegendPanel);\n  var ndviImage = ndviCol.filter(ee.Filter.eq('year', year)).mean().clip(cityBoundary);\n  Map.layers().forEach(function(layer) {\n    if (layer.getName() === 'NDVI_Year') Map.remove(layer);\n  });\n  Map.addLayer(ndviImage, {min: 0.2, max: 0.8, palette: ['white', '#66bb66', 'darkgreen']}, 'NDVI_Year');\n  ndviLegendPanel = makeLegend('NDVI Index', ['white', '#66bb66', 'darkgreen'], 0.2, 0.8);\n  Map.add(ndviLegendPanel);\n}\n\nLST Image and Chart Shows LST map for the selected year, highlights the hottest 10% (urban heat islands) in red.\n\n// Update LST map for a selected year, mask top 10% as urban heat island, add legend\nfunction updateLST(year) {\n  if (lstLegendPanel) Map.remove(lstLegendPanel);\n  var lstImage = lstCol.filter(ee.Filter.eq('year', year)).mean().clip(cityBoundary);\n  Map.layers().forEach(function(layer) {\n    var name = layer.getName();\n    if (name === 'LST_Year' || name === 'Heat_Island') Map.remove(layer);\n  });\n  Map.addLayer(lstImage, {min: 20, max: 40, palette: ['blue', 'cyan', 'yellow', 'orange', 'red']}, 'LST_Year');\n  var lst90 = lstImage.reduceRegion({reducer: ee.Reducer.percentile([90]), geometry: cityBoundary.geometry(), scale: 1000}).get('LST_C');\n  var mask = lstImage.gt(ee.Number(lst90)).selfMask();\n  Map.addLayer(mask, {palette: ['red']}, 'Heat_Island');\n  lstLegendPanel = makeLegend('LST (°C)', ['blue', 'cyan', 'yellow', 'orange', 'red'], 20, 40);\n  Map.add(lstLegendPanel);\n}\n\nUrban vs Rural Chart NDVI/LST values by urban/rural class and annual time series for comparison.\n\n// Add urban/rural class info to NDVI and LST tables for group comparisons\nvar withClassNDVI = ndviTable.map(function(f) {\n  var region = cityBoundary.filter(ee.Filter.eq('Name', f.get('Name'))).first();\n  return f.set('UrbanClass', region.get('UrbanClass'));\n});\n\nvar withClassLST = lstTable.map(function(f) {\n  var region = cityBoundary.filter(ee.Filter.eq('Name', f.get('Name'))).first();\n  return f.set('UrbanClass', region.get('UrbanClass'));\n});\n\n// Create and print NDVI and LST line charts grouped by UrbanClass\nvar ndviByClass = ui.Chart.feature.groups({\n  features: withClassNDVI,\n  xProperty: 'Year',\n  yProperty: 'mean',\n  seriesProperty: 'UrbanClass'\n}).setChartType('LineChart')\n  .setOptions({\n    title: 'Annual mean of NDVI in urban and rural areas',\n    hAxis: {title: 'Year'},\n    vAxis: {title: 'NDVI'},\n    lineWidth: 2\n  });\nprint(ndviByClass);\n\nvar lstByClass = ui.Chart.feature.groups({\n  features: withClassLST,\n  xProperty: 'Year',\n  yProperty: 'mean',\n  seriesProperty: 'UrbanClass'\n}).setChartType('LineChart')\n  .setOptions({\n    title: 'Annual mean of LST in urban and rural areas',\n    hAxis: {title: 'Year'},\n    vAxis: {title: 'LST (°C)'},\n    lineWidth: 2\n  });\nprint(lstByClass);\n\nCount Regions with Heat Islands Identifies neighborhoods repeatedly in the hottest 10% (persistent heat islands), helping target mitigation.\n\n// For each year, select top 10% hottest neighborhoods and count their recurrence\nvar years = ee.List.sequence(2013, 2022);\n\nvar topHotLists = years.map(function(y) {\n  var yearTable = lstTable.filter(ee.Filter.eq('Year', y));\n  var sorted = yearTable.sort('mean', false); \n  var count = sorted.size();\n  var top10pct = sorted.limit(count.multiply(0.1).int());\n  return top10pct.aggregate_array('Name');\n});\n\nvar allNames = topHotLists.flatten();\nvar nameFreq = allNames.reduce(ee.Reducer.frequencyHistogram());\n\nnameFreq.evaluate(function(hist) {\n  print('Urban heat island areas (≥ 5 years):');\n  var keys = Object.keys(hist);\n  var result = keys.map(function(k) {\n    return {name: k, count: hist[k]};\n  }).filter(function(obj) {\n    return obj.count &gt;= 5;\n  }).sort(function(a, b) {\n    return b.count - a.count;\n  });\n\n  result.forEach(function(obj) {\n    print(obj.name + ': ' + obj.count);\n  });\n});\n\nNDVI Simulated Prediction NDVI–LST regression, NDVI increase simulation, and interactive map cooling effect prediction. The form of NDVI–LST regression: \\[\n\\Large \\mathrm{LST} = k \\times \\mathrm{NDVI} + b\n\\] k represents the slope: how much ° C of surface temperature change (LST) occurs per unit increase in NDVI.NDVI=0 estimates intercept LST: b.\n\n*Addition of 1 unit of NDVI in results assumes land surface transitions from 0 to dense forest. To better detect the LST-NDVI correlation, the slope value will be high.\n// Fit NDVI-LST regression model for a year, allow users to simulate NDVI increase effects\nvar year = 2020;\nvar ndviImage = ndviCol.filter(ee.Filter.eq('year', year)).mean().clip(cityBoundary);\nvar lstImage = lstCol.filter(ee.Filter.eq('year', year)).mean().clip(cityBoundary);\n\n// Define mask for valid NDVI and LST range\nvar mask = ndviImage.gt(0.1).and(ndviImage.lt(0.7))\n                    .and(lstImage.gt(10)).and(lstImage.lt(45));\n\n// Calculate linear fit (slope and intercept) between NDVI and LST for masked region\nvar regression = ndviImage.addBands(lstImage).updateMask(mask)\n  .reduceRegion({\n    reducer: ee.Reducer.linearFit(),\n    geometry: cityBoundary.geometry(),\n    scale: 500,\n    maxPixels: 1e13\n  });\n\n// Evaluate regression and provide interactive simulation for NDVI increase\nregression.evaluate(function(result) {\n  print('Regression index：', result);\n\n  var slope = ee.Number(result.scale);\n  var intercept = ee.Number(result.offset);\n\n  var predictedLST = ndviImage.multiply(slope).add(intercept);\n  Map.addLayer(predictedLST, {\n    min: 20, max: 40,\n    palette: ['blue', 'cyan', 'yellow', 'orange', 'red']\n  }, 'Predicted LST');\n\n  var predictionLabel = ui.Label('Simulated Temperature Change by NDVI Increase');\n\n  // Slider to allow user to interactively simulate NDVI increase and its LST impact\n  var ndviDeltaSlider = ui.Slider({\n    min: 0,\n    max: 0.2,\n    step: 0.01,\n    value: 0.05,\n    style: {stretch: 'horizontal'},\n    onChange: function(delta) {\n      var simulatedNDVI = ndviImage.add(delta);\n      var newLST = simulatedNDVI.multiply(slope).add(intercept);\n      var diffImage = lstImage.subtract(newLST).selfMask();\n\n      // Remove previous simulation layers before updating\n      var layersToRemove = [];\n      Map.layers().forEach(function(layer) {\n        var name = layer.getName();\n        if (typeof name === 'string' && (name === 'Predicted LST')) {\n          layersToRemove.push(layer);\n        }\n      });\n      layersToRemove.forEach(function(layer) {\n        Map.remove(layer);\n      });\n\n      // Add new simulated LST prediction\n      Map.addLayer(newLST, {\n        min: 20, max: 40,\n        palette: ['blue', 'cyan', 'yellow', 'orange', 'red']\n      }, 'Predicted LST');\n\n      // Update label to show estimated cooling\n      predictionLabel.setValue('NDVI increased by ' + delta.toFixed(2) +\n        ', LST estimated Cooling' + (slope.multiply(delta)).format('%.2f').getInfo() + ' °C');\n    }\n  });\n\n  var predictionPanel = ui.Panel({\n    widgets: [\n      ui.Label('Predicted Land Surface Temperature after NDVI Increase', {fontWeight: 'bold'}),\n      ndviDeltaSlider,\n      predictionLabel\n    ],\n    style: {position: 'bottom-left', padding: '8px', width: '280px'}\n  });\n  Map.add(predictionPanel);\n\n});\n\nClick on a Region to View Trends\n\n// When user clicks on a region, show NDVI and LST time series for that region\nMap.onClick(function(coords) {\n  if (chartTabs.getValue() !== 'Clicked Region Trend') return;\n\n  var point = ee.Geometry.Point(coords.lon, coords.lat);\n  var f = ndviTable.filterBounds(point).first();\n  f.evaluate(function(feature) {\n    if (feature) {\n      var name = feature.properties.Name;\n      chartDisplayPanel.clear();\n      chartDisplayPanel.add(ui.Label('Region: ' + name));\n\n      // NDVI trend for selected region\n      var ndviChart = ui.Chart.feature.byFeature(\n        ndviTable.filter(ee.Filter.eq('Name', name)), 'Year', ['mean']\n      ).setChartType('LineChart').setOptions({\n        title: 'NDVI Trend – ' + name,\n        hAxis: {title: 'Year'}, vAxis: {title: 'NDVI'}\n      });\n\n      // LST trend for selected region\n      var lstChart = ui.Chart.feature.byFeature(\n        lstTable.filter(ee.Filter.eq('Name', name)), 'Year', ['mean']\n      ).setChartType('LineChart').setOptions({\n        title: 'LST Trend – ' + name,\n        hAxis: {title: 'Year'}, vAxis: {title: 'LST (°C)'}\n      });\n\n      chartDisplayPanel.add(ndviChart);\n      chartDisplayPanel.add(lstChart);\n    }\n  });\n});\n\nInitialize Layer Rendering\n\n// Initial rendering of NDVI and LST for default year (2020)\nupdateNDVI(2020);\nupdateLST(2020);\n\nChart Tabs & Toggle Panel\n\n// Function to get urban vs rural NDVI chart\nfunction getUrbanRuralNDVIChart() { ... }\n\n// Function to get urban vs rural LST chart\nfunction getUrbanRuralLSTChart() { ... }\n\n// Chart control panel for trend tabs\nvar chartControlPanel = ui.Panel({\n  layout: ui.Panel.Layout.flow('vertical'),\n  style: {position: 'top-right', width: '420px', backgroundColor: 'white', padding: '8px'}\n});\n\nvar chartDisplayPanel = ui.Panel();  // For dynamic display of charts based on tab\n\n// Tab selector for different chart views\nvar chartTabs = ui.Select({\n  items: ['Urban/Rural Comparison', 'Persistent Heat Islands', 'Clicked Region Trend', 'NDVI vs LST Scatter'],\n  value: 'Urban/Rural Comparison',\n  onChange: function(selected) {\n    chartDisplayPanel.clear();\n\n    if (selected === 'Urban/Rural Comparison') {\n      chartDisplayPanel.add(getUrbanRuralNDVIChart());\n      chartDisplayPanel.add(getUrbanRuralLSTChart());\n\n    } else if (selected === 'Persistent Heat Islands') {\n      chartDisplayPanel.add(ui.Label('Regions with UHI ≥ 5 years:'));\n      nameFreq.evaluate(function(hist) {\n        var keys = Object.keys(hist);\n        var result = keys.map(function(k) {\n          return {name: k, count: hist[k]};\n        }).filter(function(obj) {\n          return obj.count &gt;= 5;\n        }).sort(function(a, b) {\n          return b.count - a.count;\n        });\n\n        result.forEach(function(obj) {\n          chartDisplayPanel.add(ui.Label(obj.name + ': ' + obj.count + ' years'));\n        });\n\n        if (result.length === 0) {\n          chartDisplayPanel.add(ui.Label('No regions with persistent UHI over 5 years.'));\n        }\n      });\n\n    } else if (selected === 'Clicked Region Trend') {\n      chartDisplayPanel.add(ui.Label('Please click a region on the map to load NDVI & LST trends.'));\n      \n    } else if (selected === 'NDVI vs LST Scatter') {\n      var join = ee.Join.inner();\n      var filter = ee.Filter.and(\n        ee.Filter.equals({leftField: 'Name', rightField: 'Name'}),\n        ee.Filter.equals({leftField: 'Year', rightField: 'Year'})\n      );\n\n      var joined = join.apply(ndviTable, lstTable, filter).map(function(pair) {\n        var ndvi = ee.Feature(pair.get('primary'));\n        var lst = ee.Feature(pair.get('secondary'));\n        return ndvi.set('LST_C', lst.get('mean')).set('NDVI', ndvi.get('mean'));\n      });\n\n      var scatterChart = ui.Chart.feature.byFeature(joined, 'LST_C', ['NDVI'])\n        .setChartType('ScatterChart')\n        .setOptions({\n          title: 'NDVI vs LST Cor"
  }
]